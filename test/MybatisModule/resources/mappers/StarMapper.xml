<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mappers.StarMapper">
    <!--
    eviction: 回收策略
        LRU: 最近少使用的，移除最长时间不被使用的对象
        FIFO: 先进先出，按对象进入缓存的顺序来移除它们
        SOFT: 软引用，移除基于垃圾回收器状态和软引用规则的对象
        WEAK: 弱引用，更积极的移除基于垃圾回收器状态和弱引用规则的对象
        默认LRU
    flushInterval: 多长时间清空一次缓存，默认不清空，毫秒为单位
    readOnly
        true：将缓存引用交给用户，不安全，速度快
        false: 序列化和反序列化的技术克隆一份数据给用户
    size: 存放多少缓存
    type: 自定义缓存的全类名
        实现Cache接口
    -->
    <cache eviction="FIFO" flushInterval="60000" readOnly="true" size="1024"></cache>
    <select id="getStarById" resultType="shine" databaseId="mysql">
        select *
        from star
        where id = #{id}
    </select>
    <select id="getStarByNameAndCompany" resultType="shine" databaseId="mysql">
        select *
        from star
        where name = #{name}
          and company = #{company}
    </select>
    <select id="getStarByMap" resultType="shine" databaseId="mysql">
        select *
        from star
        where id = #{id}
          and name = #{name}
    </select>
    <select id="getStarsByNameLike" resultType="shine" databaseId="mysql">
        select *
        from star
        where name like #{name}
    </select>
    <select id="getStarByIdReturnMap" resultType="map" databaseId="mysql">
        select *
        from star
        where id = #{id}
    </select>
    <select id="getStarsMapByNameLikeReturnMap" resultType="shine" databaseId="mysql">
        select *
        from star
        where name like #{name}
    </select>
    <insert id="addStar" useGeneratedKeys="true" keyProperty="id">
        insert into star(name, salary)
        values (#{name}, #{salary})
    </insert>
    <!--<insert id="addStar" useGeneratedKeys="true" keyProperty="id" databaseId="oracle">-->
    <!--    <selectKey keyProperty="id" order="BEFORE" resultType="Integer">-->
    <!--        select STAR_SEQ.nextval from star-->
    <!--    </selectKey>-->
    <!--    insert into star(name,salary) values(#{id},#{name},#{salary})-->
    <!--</insert>-->
    <update id="updateStar">
        update star
        set name=#{name},
            salary=#{salary}
        where id = #{id}
    </update>
    <update id="deleteStarById">
        delete
        from star
        where id = #{id}
    </update>
</mapper>